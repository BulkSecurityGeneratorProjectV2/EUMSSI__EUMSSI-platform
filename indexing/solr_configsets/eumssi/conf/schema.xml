<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!--
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="eumssi" version="1.5">

<!-- fields required for Solr functionality
   -->
  <field indexed="true" name="_version_" stored="true" type="long"/>
  <field indexed="true" name="_root_" stored="false" type="string"/>

<!-- needed for mongo-connector -->
  <field indexed="true" name="_ts" stored="true" type="long"/>
  <field indexed="true" name="ns" stored="true" type="string"/>

<!-- Only remove the "id" field if you have a very good reason to. While not strictly
     required, it is highly recommended. A <uniqueKey> is present in almost all Solr
     installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
   -->
  <field indexed="true" multiValued="false" name="_id" required="true" stored="true" type="string"/>

  <!-- segment specific fields -->
  <field indexed="true" multiValued="false" name="parent_id" required="false" stored="true" type="string"/>
  <field indexed="true" multiValued="false" name="segmentType" required="false" stored="true" type="string"/>
  <field indexed="true" multiValued="false" name="beginOffset" required="false" stored="true" type="int"/>
  <field indexed="true" multiValued="false" name="endOffset" required="false" stored="true" type="int"/>

  <field indexed="true" multiValued="false" name="source" required="false" stored="true" type="string"/>
  <field indexed="true" multiValued="false" name="meta.source.inLanguage" required="false" stored="true" type="lowercase"/>
  <field indexed="true" multiValued="false" name="meta.extracted.text_polarity.numeric" required="false" stored="true" type="float"/>
  <field indexed="true" multiValued="false" name="meta.extracted.text_polarity.discrete" required="false" stored="true" type="string"/>

  <!-- main search field -->
  <field  indexed="true" multiValued="true" name="contentSearch" required="false" stored="true" type="text_general"/>
  <copyField dest="contentSearch" source="meta.source.text"/>
  <copyField dest="contentSearch" source="meta.source.description"/>
  <copyField dest="contentSearch" source="meta.source.category"/>
  <copyField dest="contentSearch" source="meta.source.headline"/>
  <copyField dest="contentSearch" source="meta.source.author"/>
  <copyField dest="contentSearch" source="meta.extracted.audio_transcript"/>
  <copyField dest="contentSearch" source="meta.extracted.video_ocr.best"/>
  <copyField dest="contentSearch" source="meta.source.keywords"/>


  <dynamicField indexed="true" multiValued="false" name="meta.source.*" required="false" stored="true" type="text_general"/>
  <!-- treat as multivalued -->
  <dynamicField name="meta.source.keywords.*" type="ignored"/>
  <field indexed="true" multiValued="true" name="meta.source.keywords" required="false" stored="true" type="string"/>
  <copyField dest="meta.source.keywords" source="meta.source.keywords.*"/>

  <!-- treat as multivalued -->
  <dynamicField name="meta.source.hashtags.*" type="ignored"/>
  <field indexed="true" multiValued="true" name="meta.source.hashtags" required="false" stored="true" type="string"/>
  <copyField dest="meta.source.hashtags" source="meta.source.hashtags.*"/>

  <!-- treat as multivalued -->
  <dynamicField name="meta.source.userMentions.*" type="ignored"/>
  <field indexed="true" multiValued="true" name="meta.source.userMentions" required="false" stored="true" type="string"/>
  <copyField dest="meta.source.userMentions" source="meta.source.userMentions.*"/>

  <!-- treat as multivalued -->
  <dynamicField name="meta.source.urlMentions.*" type="ignored"/>
  <field indexed="true" multiValued="true" name="meta.source.urlMentions" required="false" stored="true" type="string"/>
  <copyField dest="meta.source.urlMentions" source="meta.source.urlMentions.*"/>

  <field indexed="true" multiValued="false" name="meta.source.datePublished" required="false" stored="true" type="tdate"/>

  <dynamicField indexed="true" multiValued="false" name="meta.extracted.*" required="false" stored="true" type="text_general"/>

<!-- treat as multivalued -->
  <dynamicField name="meta.extracted.text_nerl.ner.*" type="ignored"/>
  <dynamicField name="meta.extracted.text_nerl.dbpedia.*" type="ignored"/>

  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.ner.PERSON" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.ner.PERSON" source="meta.extracted.text_nerl.ner.PERSON.*"/>
  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.dbpedia.PERSON" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.dbpedia.PERSON" source="meta.extracted.text_nerl.dbpedia.PERSON.*"/>

  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.ner.LOCATION" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.ner.LOCATION" source="meta.extracted.text_nerl.ner.LOCATION.*"/>
  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.dbpedia.LOCATION" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.dbpedia.LOCATION" source="meta.extracted.text_nerl.dbpedia.LOCATION.*"/>

  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.ner.ORGANIZATION" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.ner.ORGANIZATION" source="meta.extracted.text_nerl.ner.ORGANIZATION.*"/>
  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.dbpedia.ORGANIZATION" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.dbpedia.ORGANIZATION" source="meta.extracted.text_nerl.dbpedia.ORGANIZATION.*"/>

  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.ner.all" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.ner.all" source="meta.extracted.text_nerl.ner.all.*"/>
  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.dbpedia.all" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.dbpedia.all" source="meta.extracted.text_nerl.dbpedia.all.*"/>

  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.ner.MISC" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.ner.other" source="meta.extracted.text_nerl.ner.MISC.*"/>
  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.dbpedia.other" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.dbpedia.other" source="meta.extracted.text_nerl.dbpedia.other.*"/>

  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.dbpedia.Country" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.dbpedia.Country" source="meta.extracted.text_nerl.dbpedia.Country.*"/>
  <field indexed="true" multiValued="true" name="meta.extracted.text_nerl.dbpedia.City" required="false" stored="true" type="string"/>
  <copyField dest="meta.extracted.text_nerl.dbpedia.City" source="meta.extracted.text_nerl.dbpedia.City.*"/>

  <uniqueKey>_id</uniqueKey>

<!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
  <fieldType class="solr.StrField" name="string" sortMissingLast="true"/>
<!-- boolean type: "true" or "false" -->
  <fieldType class="solr.BoolField" name="boolean" sortMissingLast="true"/>
<!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
  <fieldType class="solr.TrieIntField" name="int" positionIncrementGap="0" precisionStep="0"/>
  <fieldType class="solr.TrieFloatField" name="float" positionIncrementGap="0" precisionStep="0"/>
  <fieldType class="solr.TrieLongField" name="long" positionIncrementGap="0" precisionStep="0"/>
  <fieldType class="solr.TrieDoubleField" name="double" positionIncrementGap="0" precisionStep="0"/>
<!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
  <fieldType class="solr.TrieIntField" name="tint" positionIncrementGap="0" precisionStep="8"/>
  <fieldType class="solr.TrieFloatField" name="tfloat" positionIncrementGap="0" precisionStep="8"/>
  <fieldType class="solr.TrieLongField" name="tlong" positionIncrementGap="0" precisionStep="8"/>
  <fieldType class="solr.TrieDoubleField" name="tdouble" positionIncrementGap="0" precisionStep="8"/>
<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day

         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
  <fieldType class="solr.TrieDateField" name="date" positionIncrementGap="0" precisionStep="0"/>
<!-- A Trie based date field for faster date range queries and date faceting. -->
  <fieldType class="solr.TrieDateField" name="tdate" positionIncrementGap="0" precisionStep="6"/>
<!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
  <fieldtype class="solr.BinaryField" name="binary"/>
<!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
  <fieldType class="solr.RandomSortField" indexed="true" name="random"/>
<!-- A text field that only splits on whitespace for exact matching of words -->
  <fieldType class="solr.TextField" name="text_ws" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
    </analyzer>
  </fieldType>
<!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
	 removes stop words from case-insensitive "stopwords.txt"
	 (empty by default), and down cases.  At query time only, it
	 also applies synonyms. -->
  <fieldType class="solr.TextField" name="text_general" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stop-words-all-sorted.txt"/>
<!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stop-words-all-sorted.txt"/>
      <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>
<!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
  <fieldType class="solr.TextField" name="text_en" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
<!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
<!-- Case insensitive stop word removal.
        -->
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.EnglishPossessiveFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.EnglishPossessiveFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
  </fieldType>
<!-- A text field with defaults appropriate for English, plus
	 aggressive word-splitting and autophrase features enabled.
	 This field is just like text_en, except it adds
	 WordDelimiterFilter to enable splitting and matching of
	 words on case-change, alpha numeric boundaries, and
	 non-alphanumeric chars.  This means certain compound word
	 cases will work, for example query "wi fi" will match
	 document "WiFi" or "wi-fi".
        -->
  <fieldType autoGeneratePhraseQueries="true" class="solr.TextField" name="text_en_splitting" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
<!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
<!-- Case insensitive stop word removal.
        -->
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
      <filter catenateAll="0" catenateNumbers="1" catenateWords="1" class="solr.WordDelimiterFilterFactory" generateNumberParts="1" generateWordParts="1" splitOnCaseChange="1"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
      <filter catenateAll="0" catenateNumbers="0" catenateWords="0" class="solr.WordDelimiterFilterFactory" generateNumberParts="1" generateWordParts="1" splitOnCaseChange="1"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
  </fieldType>
<!-- lowercases the entire field value, keeping it as a single token.  -->
  <fieldType class="solr.TextField" name="lowercase" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>
<!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
  <fieldtype class="solr.StrField" indexed="false" multiValued="true" name="ignored" stored="false"/>
</schema>
